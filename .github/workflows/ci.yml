{
  "name" : "Continuous Integration",
  "on" : {
    "push" : {
      "paths" : [
        "**.c",
        "**.h",
        "**.cpp",
        "**.hpp",
        "**.build",
        "**.in",
        "**.py",
        "**.yml",
        "**.gradle",
        "**.cmake",
        "CMakeLists.txt"
      ]
    },
    "pull_request" : {
      "paths" : [
        "**.c",
        "**.h",
        "**.cpp",
        "**.hpp",
        "**.build",
        "**.in",
        "**.py",
        "**.yml",
        "**.gradle",
        "**.cmake",
        "CMakeLists.txt"
      ]
    }
  },
  "env" : {
    "CMAKE_GENERATOR" : "Ninja",
    "HOMEBREW_NO_ANALYTICS" : "1",
    "HOMEBREW_NO_AUTO_UPDATE" : "1",
    "HOMEBREW_NO_INSTALL_UPGRADE" : "1",
    "HOMEBREW_NO_INSTALL_CLEANUP" : "1",
    "DEBIAN_FRONTEND" : "noninteractive",
    "TZ" : "Japan"
  },
  "jobs" : {
    "build-win32" : {
      "strategy" : {
        "fail-fast" : false,
        "matrix" : {
          "platform" : [
            {
              "triplet" : "i686-w64-mingw32",
              "cmake-system-compiler" : "i686",
              "compiler" : "gcc"
            },
            {
              "triplet" : "i686-w64-mingw32",
              "cmake-system-compiler" : "i686",
              "compiler" : "clang"
            }
          ]
        }
      },
      "runs-on" : "ubuntu-latest",
      "timeout-minutes" : 20,
      "container" : {
        "image" : "ghcr.io/homebrew/ubuntu20.04:latest",
        "options" : "--user 0"
      },
      "steps" : [
        {
          "uses" : "actions/checkout@v4",
          "with" : {
            "submodules" : "recursive"
          }
        },
        {
          "name" : "Mark all git directories safe",
          "run" : "git config --global --add safe.directory '*'"
        },
        {
          "name" : "Set up base environment",
          "run" : "apt-get -y update && apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install build-essential"
        },
        {
          "name" : "Set up Homebrew environment for Github Actions",
          "run" : "printf '%s\\n' '/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin' >> $GITHUB_PATH"
        },
        {
          "name" : "Set up default build tools",
          "run" : "sudo -H -E -u linuxbrew bash -c 'cd /home/linuxbrew && /home/linuxbrew/.linuxbrew/bin/brew install p7zip make nasm ninja cmake'"
        },
        {
          "name" : "Set up mingw-w64 for GCC",
          "if" : "matrix.platform.compiler == 'gcc'",
          "run" : "sudo -H -E -u linuxbrew bash -c 'cd /home/linuxbrew && /home/linuxbrew/.linuxbrew/bin/brew install mingw-w64'"
        },
        {
          "name" : "Set up mingw-w64 for Clang",
          "if" : "matrix.platform.compiler == 'clang'",
          "run" : "curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20220323/llvm-mingw-20220323-msvcrt-ubuntu-18.04-x86_64.tar.xz\ntar xvf llvm-mingw-20220323-msvcrt-ubuntu-18.04-x86_64.tar.xz\nmv llvm-mingw-20220323-msvcrt-ubuntu-18.04-x86_64 /opt/llvm-mingw\nexport PATH=\"/opt/llvm-mingw/bin:$PATH\"\necho \"/opt/llvm-mingw/bin\" >> $GITHUB_PATH"
        },
        {
          "name" : "Configure project",
          "run" : "cmake -S . -B build -GNinja -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.platform.cmake-system-compiler }} -DCMAKE_FIND_ROOT_PATH=/dev/null -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY -DCMAKE_C_COMPILER=${{ matrix.platform.triplet }}-gcc -DCMAKE_CXX_COMPILER=${{ matrix.platform.triplet }}-g++ -DCMAKE_RC_COMPILER=${{ matrix.platform.triplet }}-windres -DCMAKE_BUILD_TYPE=Release"
        },
        {
          "name" : "Build project",
          "run" : "cmake --build build --target archive"
        },
        {
          "uses" : "actions/upload-artifact@v4",
          "with" : {
            "name" : "${{ github.event.repository.name }}-win32-${{ matrix.platform.cmake-system-compiler }}-${{ matrix.platform.compiler }}",
            "path" : "build/**.7z"
          }
        }
      ]
    },
    "create-release" : {
      "needs" : [
        "build-win32"
      ],
      "runs-on" : "ubuntu-latest",
      "container" : {
        "image" : "ubuntu:20.04",
        "options" : "--user 0"
      },
      "timeout-minutes" : 20,
      "if" : "startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'",
      "steps" : [
        {
          "name" : "Download all artifacts",
          "uses" : "actions/download-artifact@v4"
        },
        {
          "name" : "Copy files to a consistent name",
          "run" : "cp **-gcc/*.7z TranslationAggregator-win32.7z"
        },
        {
          "name" : "Create release",
          "if" : "startsWith(github.ref, 'refs/tags/v')",
          "uses" : "marvinpinto/action-automatic-releases@latest",
          "with" : {
            "repo_token" : "${{ secrets.GITHUB_TOKEN }}",
            "prerelease" : "${{ contains(github.ref, '-rc') }}",
            "files" : "*.7z\n**/*.7z"
          }
        },
        {
          "name" : "Create prerelease",
          "if" : "github.ref == 'refs/heads/master'",
          "uses" : "marvinpinto/action-automatic-releases@latest",
          "with" : {
            "repo_token" : "${{ secrets.GITHUB_TOKEN }}",
            "prerelease" : "true",
            "automatic_release_tag" : "latest",
            "title" : "Latest development builds",
            "files" : "*.7z\n**/*.7z"
          }
        }
      ]
    }
  }
}